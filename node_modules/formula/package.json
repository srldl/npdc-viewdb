{
  "_args": [
    [
      "formula@github:npolar/formula#v4.5.2",
      "/home/siri/projects/npdc-viewdb/node_modules/npdc-common"
    ]
  ],
  "_from": "npolar/formula#v4.5.2",
  "_id": "formula@4.5.2",
  "_inCache": true,
  "_location": "/formula",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/npolar/formula/v4.5.2/package.json",
      "gitUrl": "git://github.com/npolar/formula.git#v4.5.2",
      "httpsUrl": "git+https://github.com/npolar/formula.git#v4.5.2",
      "shortcut": "github:npolar/formula#v4.5.2",
      "ssh": "git@github.com:npolar/formula.git#v4.5.2",
      "sshUrl": "git+ssh://git@github.com/npolar/formula.git#v4.5.2",
      "type": "github"
    },
    "name": "formula",
    "raw": "formula@github:npolar/formula#v4.5.2",
    "rawSpec": "github:npolar/formula#v4.5.2",
    "scope": null,
    "spec": "github:npolar/formula#v4.5.2",
    "type": "hosted"
  },
  "_requiredBy": [
    "/npdc-common"
  ],
  "_resolved": "git://github.com/npolar/formula.git#33ba97ef52421f68f4eb968cd9d8509734e013ff",
  "_shasum": "ce3a865a2ef66ce4855badedc33d36701823b30d",
  "_shrinkwrap": null,
  "_spec": "formula@github:npolar/formula#v4.5.2",
  "_where": "/home/siri/projects/npdc-viewdb/node_modules/npdc-common",
  "author": {
    "name": "@npolar"
  },
  "bugs": {
    "url": "https://github.com/npolar/formula/issues"
  },
  "dependencies": {
    "angular": "^1.5.3",
    "tv4": "^1.1.12"
  },
  "description": "HTML forms from JSON schema",
  "devDependencies": {
    "angular": "^1.5.3",
    "gulp": "^3.9.0",
    "gulp-angular-templatecache": "^1.7.0",
    "gulp-concat": "^2.6.0",
    "gulp-concat-css": "^2.2.0",
    "gulp-csso": "^1.0.0",
    "gulp-define-module": "^0.1.3",
    "gulp-jshint": "^1.11.2",
    "gulp-minify-html": "^1.0.4",
    "gulp-uglify": "^1.2.0"
  },
  "gitHead": "33ba97ef52421f68f4eb968cd9d8509734e013ff",
  "homepage": "https://github.com/npolar/formula#readme",
  "installable": true,
  "license": "MIT",
  "main": "dist/formula.commonjs.js",
  "name": "formula",
  "optionalDependencies": {},
  "readme": "# formula\n\nGeneric JSON Schema form builder using Angular\n\nFor usage examples, check out the [Formula demo](http://npolar.github.io/formula/demo/) webpage.\n\n\n## Dependencies\n* [AngularJS](https://angularjs.org/) (^1.4.7)\n* [tv4.js](https://github.com/geraintluff/tv4/)\n\n\n## Bootstrapping\nBootstrapping is done by using the **'formula'** service to create a instance. This is then passed into to **&lt;formula&gt;** directive as configuration.\n\n```JavaScript\n  $scope.formula = formula.getInstance(options);\n```\n\n```html\n  <formula options=\"formula\"></formula>\n```\n\n### Options\n* **schema**\\* - [url] JSON schema\n* **form** - [url, Object], form layout config\n* **language** - [String] language code\n* **languages** - [Array] languages\n* **model** - [Promise, Object] JSON document\n* **keepFailing** - [Boolean], to keep properties with failing conditions in model or not (default: true)\n* **templates** - [Object] templates\n* **onsave** - [Function] onsave function\n* **confirmDirtyNavigate** - [Function (navigate)] function with one argument, a function to proceed with blocked navigation.\n\n#### options.form\nConfig to set form title, group properties into fieldsets, override schema type, set formats and visibility conditions.\n\n\n```json\n{\n\t\"title\": \"Form title\",\n\t\"fieldsets\": [\n\t\t{\n\t\t\t\"title\": \"First fieldset\",\n\t\t\t\"fields\": [\n\t\t\t\t\"schemaPropertyX\",\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"schemaPropertyY\",\n\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\"condition\": [\"schemaPropertyX!='something'\"]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"title\": \"Second fieldset\",\n\t\t\t\"fields\": [\n\t\t\t\t...\n\t\t\t]\n\t\t}\n\t]\n}\n\n```\n\nIn special use cases you might want to have the same field rendered multiple times. To be able to differentiate between multiple instances of the same field you can set the ```instance``` property in the form definition to something unique.\n\n#### options.languages\nLanguages is configured like this:\n\n```js\nlanguages: [{\n  code: 'en',\n  aliases: ['en_GB'],\n  uri: 'uri to translation file',\n  //map: translation object\n}]\n\n```\n\nSee demo/json/no.json for example translation file\n\n#### options.templates####\nTemplates is configured like this:\n\n```JavaScript\ntemplates: [\n  {\n    match: function(field) {\n      return field.id === \"ref_object\";\n    },\n    // match: 'form|fieldset|field'\n    // match: 'field.id'\n    // match: '#/field.path'\n    templateUrl: 'customObject.html',\n    //template: '<p>{{field.title}}</p>',\n    //template: '',\n    //hidden: true\n  }, {\n    ...\n  }\n]\n```\n\nIf you are defining your own template you need to provide at least one with ```match: 'form'```, one with ```'fieldset'``` and one with ```'field'```.\n\nTemplates are evaluated in LIFO order!\nAll templates can have one root element only.\n\nThe matched template can be overridden by setting the ```template``` property directly on any node.\n\n### The service instance\nThe instance you get from bootstrapping (```formula.getInstance()```) has the following API:\n\n    formula.setModel(model)\nSet data model\n\n    formula.getModel()\nGet data model\n\n    formula.setForm(formDefinition)\nSet form definition\n\n    formula.setOnSave(saveCallback)\nSet save callback\n\n    formula.setConfirmDirtyNavigate(confirmFunction)\nSet confirmDirtyNavigate function. confirmFunction is called with one argument, a function to proceed with blocked navigation.\n\n    formula.save()\nExec save\n\n    formula.getSchema()\nGet dereferenced schema, returns a promise\n\n    formula.getFieldByPath(jsonPath)\nGet field by json path, returns a promise\n\n    formula.getFields()\nGet all fields, returns a promise\n\n    formula.i18n.add(lang, code, [aliases])\nAdd language. lang can be either a uri or a object. See i18n/no.json for example translation. Aliases is an array of alternative language codes. E.g. 'en' might have 'en-GB' and 'en-US' as aliases. Setting either code will resolve to 'en'. Returns a promise.\n\n    formula.i18n.set(code)\nSet language\n\n    formula.i18n.code\nGetter for current language code\n\n    formula.setTemplates(templates)\nSet templates\n\n    formula.addTemplate(template)\nAdd a template\n\n    formula._cfg\nConfig object to pass to formula directive.\n\n## Supported types\n* **any** rendered as:\n * **text input** which automatically recognises **boolean**, **number** and **array** types\n* **array** rendered as:\n * **fieldset array** if the *items type* property is set to *object*\n * **field array** if the *items type* property is set to a basic JSON Schema type\n * **multiple select** if the *items enum* property is set\n* **boolean** rendered as:\n * **checkbox input**\n* **integer** and **number** rendered as:\n * **range input** if *type* property is set to *range* (in a separate form definition)\n * **select** if the *enum* property is set\n * **number input** otherwise\n* **null** which is simply not rendered\n* **object** which is rendered as a fieldset\n* **string** rendered as:\n * **date input** if the *format* property is set to *date*\n * **datetime input** if the *format* property is set to *date-time*\n * **time input** if the *format* property is set to *time*\n * **textarea** if the *type* property is set to *textarea* (in a separate form definition)\n * **number input** if the *format* property is set to *utc-millisec*\n * **select** if the *enum* property is set\n * **text input** otherwise\n\n\n## Supported string formats\n* **color** for CSS 2.1 colors\n* **date** for ISO 8601 date\n* **date-time** for ISO 8601 date-time combinations\n* **time** for ISO 8601 time\n* **uri** for RFC 3986 uniform resource identifier\n\n## Config service\nIf you need to configure something on a per-field basis you can use **'formulaFieldConfig'** in a similar way as in ```options.templates```.\n\n```js\n  var configs = formulaFieldConfig.getInstance([\n    {\n      match: [String/Function],\n      options ...\n    }\n  ])\n```\n\nYou can then use this configset like so:\n```js\n  configs.getMatchingConfig(field);\n  configs.isMatch(field, config);\n  configs.setConfigs(configs);\n  configs.addConfig(config);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npolar/formula.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "4.5.2"
}
